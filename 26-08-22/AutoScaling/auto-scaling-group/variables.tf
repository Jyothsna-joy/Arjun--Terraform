variable "function" {
  description = "Function/scope of the module. This value will be used to form the Name tag. Example: WANV-SHS-9-EC2-<function>-001"
  validation {
    condition     = can(regex("^[a-zA-Z0-9-]+$", var.function))
    error_message = "Function should contain only alphanumeric characters and dash."
  }
}

variable "increment_code" {
  description = "Increment code to append to the name. Example: WANV-SHS-9-EC2-WebProxy-<increment_code>"
  validation {
    condition     = can(regex("^\\d{3}$", var.increment_code))
    error_message = "Increment code must be a three digit number."
  }
}

variable "description" {
  type        = string
  description = "Description of the lambda. same will be used for the tag: Description"
}

variable "naming_prefix" {
  type        = string
  description = "Used to to name resource."
}

variable "common_tags" {
  type        = map(any)
  description = "General AWS resources tags."
}

variable "additional_tags" {
  description = "Mention additional tags if any."
  type        = map(any)
  default     = {}
  /*
    -------------------------------
    EXAMPLE INPUT VALUE:-
    -------------------------------
    additional_tags = {
      ApplicationCode = "ABC"
      Purpose = "Demo"
    }
    -------------------------------
  */
}

variable "name" {
  type        = string
  description = " The name of the Auto Scaling Group. By default generated by Terraform."
}

# variable "name_prefix" {
#   type        = string
#   description = "Creates a unique name beginning with the specified prefix."
# }

variable "max_size" {
  type        = number
  description = "The maximum size of the Auto Scaling Group."
}

variable "min_size" {
  type        = number
  description = "The minimum size of the Auto Scaling Group."
}

variable "availability_zones" {
  type        = list(string)
  description = "A list of one or more availability zones for the group."
  default     = null
  nullable    = true
}

variable "capacity_rebalance" {
  type        = bool
  description = "Indicates whether capacity rebalance is enabled."
  default     = false
}

variable "default_cooldown" {
  type        = number
  default     = null
  nullable    = true
  description = "The amount of time, in seconds, after a scaling activity completes before another scaling activity can start."
}


variable "launch_configuration_name" {
  type        = string
  default     = null
  nullable    = true
  description = "Launch configuration name"
}

variable "vpc_zone_identifier" {
  type        = list(string)
  default     = null
  nullable    = true
  description = "A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside."
}


variable "default_instance_warmup" {
  type        = number
  default     = null
  nullable    = true
  description = "The amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. "
}

variable "launch_template" {
  default     = null
  nullable    = true
  description = "Nested argument with Launch template specification to use to launch instances."
}

variable "initial_lifecycle_hook" {
  default     = null
  nullable    = true
  description = "One or more Lifecycle Hooks to attach to the Auto Scaling Group before instances are launched."
}

variable "mixed_instances_policy" {
  default     = null
  nullable    = true
  description = "Configuration block containing settings to define launch targets for Auto Scaling groups."
}

variable "health_check_grace_period" {
  default     = 300
  type        = number
  description = "Time (in seconds) after instance comes into service before checking health."
}

variable "health_check_type" {
  default = "EC2"
  type    = string
  validation {
    error_message = "Only accept 'EC2' and 'ELB'"
    condition     = contains(["EC2", "ELB"], var.health_check_type)
  }
  description = "'EC2' or 'ELB'. Controls how health checking is done."
}

variable "desired_capacity" {
  default     = null
  type        = number
  nullable    = true
  description = "The number of Amazon EC2 instances that should be running in the group."
}

variable "force_delete" {
  default     = false
  type        = bool
  description = "Allows deleting the Auto Scaling Group without waiting for all instances in the pool to terminate. You can force an Auto Scaling Group to delete even if it's in the process of scaling a resource. "
}

variable "load_balancers" {
  default     = []
  type        = list(string)
  description = "A list of elastic load balancer names to add to the autoscaling group names. Only valid for classic load balancers."
}


variable "target_group_arns" {
  default     = []
  type        = list(string)
  description = "A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside."
}

variable "termination_policies" {
  default = ["Default"]
  type    = list(string)
  validation {
    condition = alltrue([
      for o in var.termination_policies : contains(["OldestInstance", "NewestInstance", "OldestLaunchConfiguration", "ClosestToNextInstanceHour", "OldestLaunchTemplate", "AllocationStrategy", "Default"], o)
    ])
    error_message = "Acceped values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, OldestLaunchTemplate, AllocationStrategy, Default"
  }
  description = "A list of policies to decide how the instances in the Auto Scaling Group should be terminated."
}

variable "suspended_processes" {
  type = list(string)
  validation {
    condition = alltrue([
      for o in var.suspended_processes : contains(["Launch", "Terminate", "HealthCheck", "ReplaceUnhealthy", "AZRebalance", "AlarmNotification", "ScheduledActions", "AddToLoadBalancer"], o)
    ])
    error_message = "Acceped values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer"
  }
  default     = []
  nullable    = true
  description = "A list of processes to suspend for the Auto Scaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer"
}

variable "placement_group" {
  type        = string
  default     = null
  nullable    = true
  description = "The name of the placement group into which you'll launch your instances, if any."
}

variable "metrics_granularity" {
  type        = string
  default     = "1Minute"
  description = "The granularity to associate with the metrics to collect. The only valid value is 1Minute"
}

variable "enabled_metrics" {
  type        = list(string)
  default     = null
  nullable    = true
  description = "A list of metrics to collect. The allowed values are defined by the underlying AWS API."
}

variable "wait_for_capacity_timeout" {
  type        = string
  default     = "10m"
  description = "A maximum duration that Terraform should wait for ASG instances to be healthy before timing out."
}

variable "min_elb_capacity" {
  default     = null
  nullable    = true
  description = "Setting this causes Terraform to wait for this number of instances from this Auto Scaling Group to show up healthy in the ELB only on creation."
}


variable "wait_for_elb_capacity" {
  type        = number
  default     = null
  nullable    = true
  description = "Setting this causes Terraform to wait for this number of instances from this Auto Scaling Group to show up healthy in the ELB only on creation."
}

variable "protect_from_scale_in" {
  default     = null
  nullable    = true
  description = " Indicates whether newly launched instances are automatically protected from termination by Amazon EC2 Auto Scaling when scaling in."
}

variable "service_linked_role_arn" {
  default     = null
  type        = string
  nullable    = true
  description = "The ARN of the service-linked role that the ASG will use to call other AWS services"
}

variable "max_instance_lifetime" {
  default     = null
  type        = number
  nullable    = true
  description = "The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds."
}

variable "instance_refresh" {
  default     = null
  nullable    = true
  description = "The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds."
}

variable "warm_pool" {
  default     = null
  nullable    = true
  description = "The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds."
}

variable "tags" {
  default     = []
  description = "General tags"

}


## schedule variables


variable "schedule_name" {
  default     = null
  type        = string
  nullable    = true
  description = "The name of this scaling action."
}

variable "schedule_start_time" {
  default     = null
  type        = string
  nullable    = true
  description = "The time for this action to start, in 'YYYY-MM-DDThh:mm:ssZ' format in UTC/GMT only (for example, 2014-06-01T00:00:00Z )."
}

variable "schedule_end_time" {
  default     = null
  type        = string
  nullable    = true
  description = "The time for this action to end, in 'YYYY-MM-DDThh:mm:ssZ' format in UTC/GMT only (for example, 2014-06-01T00:00:00Z )"
}

variable "schedule_recurrence" {
  default     = null
  type        = string
  nullable    = true
  description = "The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format."
}

variable "schedule_time_zone" {
  default     = null
  type        = string
  nullable    = true
  description = "The timezone for the cron expression. Valid values are the canonical names of the IANA time zones (such as Etc/GMT+9 or Pacific/Tahiti)."
}

variable "schedule_min_size" {
  default     = null
  type        = string
  nullable    = true
  description = "The minimum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the minimum size at the scheduled time."
}

variable "schedule_max_size" {
  default     = null
  type        = string
  nullable    = true
  description = "The maximum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the maximum size at the scheduled time."
}

variable "schedule_desired_capacity" {
  default     = null
  type        = string
  nullable    = true
  description = "The number of EC2 instances that should be running in the group. "
}


## lifecycle hook 

variable "policy_hook_name" {
  default     = null
  type        = string
  description = "The name of the lifecycle hook."
}

variable "policy_hook_lifecycle_transition" {
  default     = null
  description = "The instance state to which you want to attach the lifecycle hook."
}

variable "policy_hook_default_result" {
  default = "ABANDON"
  type    = string
  validation {
    error_message = "Accepted values are 'CONTINUE' or 'ABANDON'"
    condition     = contains(["CONTINUE", "ABANDON"], var.policy_hook_default_result)
  }
  nullable    = true
  description = "Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. "
}

variable "policy_hook_heartbeat_timeout" {
  default     = null
  type        = number
  nullable    = true
  description = "Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter"
}

variable "policy_hook_notification_target_arn" {
  default     = null
  type        = string
  nullable    = true
  description = "The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic."
}

variable "policy_hook_role_arn" {
  default     = null
  type        = string
  nullable    = true
  description = "The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target."
}

variable "policy_hook_notification_metadata" {
  default     = null
  type        = string
  nullable    = true
  description = "Contains additional information that you want to include any time Auto Scaling sends a message to the notification target."
}


## autoscaling policy

variable "policy_name" {
  default     = null
  type        = string
  nullable    = true
  description = "The name of the policy."
}

variable "policy_adjustment_type" {
  default     = null
  type        = string
  nullable    = true
  description = "Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity"
}

variable "policy_type" {
  default     = null
  type        = string
  nullable    = true
  description = "The policy type, either SimpleScaling, StepScaling, TargetTrackingScaling, or PredictiveScaling. If this value isn't provided, AWS will default to SimpleScaling."
}

variable "policy_predictive_scaling_configuration" {
  default     = null
  nullable    = true
  description = " The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling."
}

variable "policy_estimated_instance_warmup" {
  default     = null
  type        = string
  nullable    = true
  description = "The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period."
}

variable "policy_enabled" {
  default     = true
  type        = bool
  nullable    = true
  description = "Indicates whether the scaling policy is enabled or disabled."
}

variable "policy_min_adjustment_magnitude" {
  default     = null
  nullable    = true
  description = "Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity."
}

variable "policy_cooldown" {
  default     = null
  type        = number
  nullable    = true
  description = "The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start."
}

variable "policy_scaling_adjustment" {
  default     = null
  type        = number
  nullable    = true
  description = "The number of instances by which to scale."
}

variable "policy_metric_aggregation_type" {
  default     = null
  nullable    = true
  description = "The aggregation type for the policy's metrics. Valid values are Minimum, Maximum, and Average. Without a value, AWS will treat the aggregation type as Average."
}

variable "policy_step_adjustment" {
  default     = null
  nullable    = true
  description = "A set of adjustments that manage group scaling."
}

variable "policy_target_tracking_configuration" {
  default     = null
  nullable    = true
  description = "A target tracking policy. "
}

